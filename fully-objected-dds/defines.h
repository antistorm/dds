///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// SETTINGS
/////////////////////////////////////////////////////////////////////////////////////

#define LCD_PIN_D4 PB4
#define LCD_PIN_D5 PB5
#define LCD_PIN_D6 PB6
#define LCD_PIN_D7 PB7
#define LCD_PIN_RS 0 // PB0
#define LCD_PIN_EN 1 // PB1
//
//
#define DDS_PORT PORTC
#define PWM_HS_PIN 13 // (PD5)
#define ADC_BATTERY_SENSE_PIN 31
#define ADC_BATTERY_SENSE_SMOOTH 20
#define SGEN_OUTPUT_DISABLE_PIN 24
//
#define ENCODER_PIN_1 15
#define ENCODER_PIN_2 10
#define ENCODER_SET_PIN_1 11
//
#define ACTION_ENCODER_MOVED 0
#define ACTION_ENCODER_SET 1
//
#define BATTERY_VOLTAGE_TOP 4.1
#define BATTERY_VOLTAGE_LOWEST 2.9
#define ATMEGA_VOLTAGE 5
#define FREQUENCY_TO_STEP 20 // may need adjustment!
#define ATMEGA_FREQUENCY_MHZ 20 // may need adjustment!
//
//#define VOLTAGE_SENSE_PIN_1 1
//#define OUTPUT_ENABLE_PIN 8
//
// values array indexes

#define WAVETYPE_IDX 0
#define FREQUENCY_IDX 1
#define OUTPUTSTATE_IDX 2
#define AMPLITUDE_IDX 3
#define OFFSET_IDX 8
#define FAST_PWM 5
#define DUTYCYCLE_IDX 4
#define SWEEP_IDX 7


// waveform indexes

#define SINUS 0
#define SAWTOOTH 1
#define SAWTOOTH_INVERSE 2
#define PWM_SOFTWARE 3
#define ECG 4
#define NOISE 5
#define TRIANG 6
// 
#define MAXIMUM_OUTPUT_AMPLITUDE_PEAK_V 5
#define MAXIMUM_OFFSET_VOLTAGE 5
#define ATTEN_PRC50_PORT 24
#define ATTEN_PRC12_PORT 25
#define ATTEN_PRC06_PORT 26
#define ATTEN_PRC03_PORT 27
#define ATTEN_PRC01_PORT 28
//

#define DISPLAY_FREQUENCY_BUFFER_LENGTH_SOFTWAREDDS 5
#define DISPLAY_FREQUENCY_BUFFER_LENGTH_HS 8

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// WAVEFORMS
/////////////////////////////////////////////////////////////////////////////////////
const uint8_t SINE_WAVE[] PROGMEM = {
  0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae,
  0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8,
  0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,
  0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,
  0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
  0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3,
  0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
  0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51,
  0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27,
  0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a,
  0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,
  0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
  0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,
  0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c
};

const uint8_t SQUARE_WAVE[] PROGMEM = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};

const uint8_t SAWTOOTH_WAVE[] PROGMEM = {
  0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
  0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
  0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
  0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
  0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
  0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
  0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
  0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
  0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
  0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
  0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
  0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
  0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
  0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
  0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
};

const uint8_t REV_SAWTOOTH_WAVE[] PROGMEM = {
  0xff,0xfe,0xfd,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,0xf6,0xf5,0xf4,0xf3,0xf2,0xf1,0xf0,
  0xef,0xee,0xed,0xec,0xeb,0xea,0xe9,0xe8,0xe7,0xe6,0xe5,0xe4,0xe3,0xe2,0xe1,0xe0,
  0xdf,0xde,0xdd,0xdc,0xdb,0xda,0xd9,0xd8,0xd7,0xd6,0xd5,0xd4,0xd3,0xd2,0xd1,0xd0,
  0xcf,0xce,0xcd,0xcc,0xcb,0xca,0xc9,0xc8,0xc7,0xc6,0xc5,0xc4,0xc3,0xc2,0xc1,0xc0,
  0xbf,0xbe,0xbd,0xbc,0xbb,0xba,0xb9,0xb8,0xb7,0xb6,0xb5,0xb4,0xb3,0xb2,0xb1,0xb0,
  0xaf,0xae,0xad,0xac,0xab,0xaa,0xa9,0xa8,0xa7,0xa6,0xa5,0xa4,0xa3,0xa2,0xa1,0xa0,
  0x9f,0x9e,0x9d,0x9c,0x9b,0x9a,0x99,0x98,0x97,0x96,0x95,0x94,0x93,0x92,0x91,0x90,
  0x8f,0x8e,0x8d,0x8c,0x8b,0x8a,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,0x80,
  0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,
  0x6f,0x6e,0x6d,0x6c,0x6b,0x6a,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,
  0x5f,0x5e,0x5d,0x5c,0x5b,0x5a,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,
  0x4f,0x4e,0x4d,0x4c,0x4b,0x4a,0x49,0x48,0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,
  0x3f,0x3e,0x3d,0x3c,0x3b,0x3a,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,
  0x2f,0x2e,0x2d,0x2c,0x2b,0x2a,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20,
  0x1f,0x1e,0x1d,0x1c,0x1b,0x1a,0x19,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,
  0x0f,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,
};

const uint8_t TRIANGLE_WAVE[] PROGMEM = {
  0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
  0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
  0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
  0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
  0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
  0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
  0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
  0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
  0xff,0xfd,0xfb,0xf9,0xf7,0xf5,0xf3,0xf1,0xef,0xef,0xeb,0xe9,0xe7,0xe5,0xe3,0xe1,
  0xdf,0xdd,0xdb,0xd9,0xd7,0xd5,0xd3,0xd1,0xcf,0xcf,0xcb,0xc9,0xc7,0xc5,0xc3,0xc1,
  0xbf,0xbd,0xbb,0xb9,0xb7,0xb5,0xb3,0xb1,0xaf,0xaf,0xab,0xa9,0xa7,0xa5,0xa3,0xa1,
  0x9f,0x9d,0x9b,0x99,0x97,0x95,0x93,0x91,0x8f,0x8f,0x8b,0x89,0x87,0x85,0x83,0x81,
  0x7f,0x7d,0x7b,0x79,0x77,0x75,0x73,0x71,0x6f,0x6f,0x6b,0x69,0x67,0x65,0x63,0x61,
  0x5f,0x5d,0x5b,0x59,0x57,0x55,0x53,0x51,0x4f,0x4f,0x4b,0x49,0x47,0x45,0x43,0x41,
  0x3f,0x3d,0x3b,0x39,0x37,0x35,0x33,0x31,0x2f,0x2f,0x2b,0x29,0x27,0x25,0x23,0x21,
  0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x11,0x0f,0x0f,0x0b,0x09,0x07,0x05,0x03,0x01
};

const uint8_t ECG_WAVE[] PROGMEM = {
  73,74,75,75,74,73,73,73,73,72,71,69,68,67,67,67,
  68,68,67,65,62,61,59,57,56,55,55,54,54,54,55,55,
  55,55,55,55,54,53,51,50,49,49,52,61,77,101,132,
  169,207,238,255,254,234,198,154,109,68,37,17,5,
  0,1,6,13,20,28,36,45,52,57,61,64,65,66,67,68,68,
  69,70,71,71,71,71,71,71,71,71,72,72,72,73,73,74,
  75,75,76,77,78,79,80,81,82,83,84,86,88,91,93,96,
  98,100,102,104,107,109,112,115,118,121,123,125,
  126,127,127,127,127,127,126,125,124,121,119,116,
  113,109,105,102,98,95,92,89,87,84,81,79,77,76,75,
  74,73,72,70,69,68,67,67,67,68,68,68,69,69,69,69,
  69,69,69,70,71,72,73,73,74,74,75,75,75,75,75,75,
  74,74,73,73,73,73,72,72,72,71,71,71,71,71,71,71,
  70,70,70,69,69,69,69,69,70,70,70,69,68,68,67,67,
  67,67,66,66,66,65,65,65,65,65,65,65,65,64,64,63,
  63,64,64,65,65,65,65,65,65,65,64,64,64,64,64,64,
  64,64,65,65,65,66,67,68,69,71,72,73
};

const uint8_t NOISE_SIGNAL[] PROGMEM = {
  0x0a,0x0e,0x2d,0x73,0xc4,0x40,0xaa,0x8f,0xdd,0xf3,0x6b,0x97,0xb9,0x8d,0x77,0x57,
  0xe3,0x52,0x93,0x3f,0x25,0x07,0x99,0x5f,0x8b,0x37,0x30,0x7b,0x3a,0x89,0xc6,0xae,
  0x4e,0x58,0xe4,0x4b,0x48,0x05,0xd6,0xf2,0x5c,0x44,0xef,0xf8,0x69,0xf6,0x92,0x56,
  0x1d,0x96,0xab,0x2f,0x88,0x35,0xf5,0x36,0x83,0xfc,0x8e,0x60,0xe0,0xda,0xa8,0x5b,
  0xdf,0x7e,0x4d,0x3b,0x38,0x91,0x2b,0xfa,0x21,0xc2,0x23,0x0d,0x2e,0xce,0x3c,0xb6,
  0x03,0x32,0xed,0x86,0xe6,0x0f,0x55,0x6a,0x34,0xb8,0x70,0x45,0x49,0x9b,0x76,0xbc,
  0x18,0x5a,0x41,0x46,0x28,0xfd,0x2c,0xb0,0xea,0xb2,0xde,0x65,0xbb,0x10,0x59,0xf1,
  0x9d,0xb7,0x29,0xd4,0xeb,0x42,0x85,0x6f,0x39,0xd5,0x26,0x90,0x7f,0xa7,0xe8,0xd9,
  0x98,0xc1,0x8c,0x11,0x62,0xad,0x81,0x66,0x0c,0x5d,0x19,0x01,0x1e,0xc8,0x87,0xe1,
  0x2a,0xd2,0x24,0xd1,0x43,0xe7,0x4f,0x68,0xc0,0xaf,0x5e,0x9e,0x84,0xe2,0x50,0xcb,
  0x1a,0xc3,0xb4,0x74,0x04,0xac,0x64,0xa0,0x13,0xd3,0x31,0x00,0x9c,0xfe,0x4a,0xb3,
  0x78,0x15,0x3e,0xee,0x94,0x7c,0x1c,0x72,0xa1,0x20,0x9f,0x95,0xcf,0x3d,0x82,0xb5,
  0xbd,0x54,0xa6,0x47,0x6e,0x75,0xc7,0x1b,0xd7,0x09,0x16,0xf0,0x12,0x02,0xb1,0x06,
  0x4c,0xcd,0xa9,0xa2,0x6c,0xa5,0x61,0xca,0x7d,0x1f,0x22,0x17,0x14,0xc5,0xd8,0x6d,
  0x8a,0xf7,0x51,0xa3,0xfb,0xf4,0x63,0xbf,0x79,0xc9,0x27,0xec,0x7a,0x9a,0xbe,0x80,
  0xff,0xe5,0xba,0xcc,0x0b,0xdb,0xdc,0xf9,0x67,0xe9,0xa4,0x08,0xd0,0x71,0x33,0x53
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// S-GEN ENCODER CONTROL
/////////////////////////////////////////////////////////////////////////////////////
class SGEN_Regulation {
  private:
    
    uint8_t menuLevelBounds[2] = {0, 2};
  public:
    volatile uint8_t menuLevel = 0;
    //SGEN_Regulation(uint8_t);
    /////////////////////////    /////////////////////////    /////////////////////////
    // getters & setters
    /////////////////////////    /////////////////////////    /////////////////////////
    int8_t getMenuLevel();
    /////////////////////////
    void setMenuLevel(uint8_t level);
    /////////////////////////    /////////////////////////    /////////////////////////
    // regulation
    /////////////////////////    /////////////////////////    /////////////////////////
    int8_t circulateMenuLevels(int8_t value);
    /////////////////////////
    void doActionEncoderMove(int8_t value);
    /////////////////////////
    void doActionEncoderSet(int8_t value);
    /////////////////////////
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// S-GEN VALUE
/////////////////////////////////////////////////////////////////////////////////////
class Value {
  private:
    volatile int32_t value;
    volatile char selectedDigitId = 0;
    char maxLength;
  public:

    String unit;
    int32_t range[2];
    uint8_t resolution;
    uint8_t minimalChange;
    bool isHighlited;
    uint8_t associatedDisplay;
    uint8_t lcdPosition[2];
    /////////////////////////
    Value(int32_t value, String unit, int32_t range[], uint8_t resolution, uint8_t minimalChange, bool isHighlited, uint8_t associatedDisplay, uint8_t lcdPosition[2]);
    /////////////////////////    /////////////////////////    /////////////////////////
    // setters
    /////////////////////////    /////////////////////////    /////////////////////////
    /////////////////////////
    bool setValue(int32_t value);
    /////////////////////////
    byte moveByValue(int8_t moveStep);
    /////////////////////////
    int32_t returnBufferedStep();
    /////////////////////////
    byte moveByValueBuffered(int8_t moveStep);
    /////////////////////////
    void setSelectedDigitId(int8_t digitId);
    /////////////////////////
    void circulateSelectedDigitId(int8_t moveStep);
    /////////////////////////
    byte setBufferMaxLength();
    /////////////////////////
    void checkValueBounds();
    /////////////////////////    /////////////////////////    /////////////////////////
    // getters
    /////////////////////////    /////////////////////////    /////////////////////////
    bool isValueSigned();
    /////////////////////////
    uint8_t getBufferLength();
    /////////////////////////
    uint8_t getSelectedDigitId();
    /////////////////////////
    int8_t getValueSign();
    /////////////////////////
    int32_t getValue();
    /////////////////////////
    String getUnit();
    /////////////////////////
    uint8_t getResolution();
    /////////////////////////
    uint8_t getMinimalChange();
    /////////////////////////
    bool isHighlitable();
    /////////////////////////
    uint8_t getAssociatedDisplay();
    /////////////////////////
    uint8_t* getLcdPosition();
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// SIGNALS GENERATION AND STORAGE
/////////////////////////////////////////////////////////////////////////////////////
class SGEN_Waveforms {
  public:
    uint8_t waveform[256];
    volatile uint16_t stepV;
    
    /////////////////////////    /////////////////////////    /////////////////////////
    // waveform generation
    /////////////////////////    /////////////////////////    /////////////////////////
    ///////////////////////////////////////////////////////////// above 22Hz
    void waveformDDSGenerate();
    /////////////////////////
    /*
    void waveformDDSGenerate2(uint32_t frequency) {
      uint16_t stepV = uint16_t(frequency / FREQUENCY_TO_STEP);
      uint16_t counter = 0;
      uint16_t cont = 0;

      while (1) {
        counter += stepV;
        DDS_PORT = this->waveform[counter >> 8];
        cont++;
        if (cont == 65535) {
          return;
        }
      }
    }
    */
    /////////////////////////
    uint16_t hardwareFrequencyToCounts(int32_t frequency);
    /////////////////////////
    void waveformHardwarePwmGenerate(int32_t frequency);
    /////////////////////////    /////////////////////////    /////////////////////////
    // DDS software waveform manipulations
    /////////////////////////    /////////////////////////    /////////////////////////
    void waveformRewriteToRAM(const uint8_t* waveform);
    /////////////////////////
    void waveformSoftwareAmplitudePercent(uint8_t percent);
    /////////////////////////
    void waveformSoftwarePWM(uint8_t dutyCycle);
    ///////////////////////// for dev purp.
    void readWaveform();
    /////////////////////////    /////////////////////////    /////////////////////////
    // waveform load
    /////////////////////////    /////////////////////////    /////////////////////////
    void waveformLoad(int32_t waveformID, uint8_t amplitude, uint8_t dutyCycle);
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// S-GEN VALUES
/////////////////////////////////////////////////////////////////////////////////////
class SGEN_Values {
  public:
    Value valuesArray[6] = {
      // [ value, unit, range[2], resolution, minimal change, is regulated?, screen, lcd position ]
      Value(0, "", new int32_t[2]{0, 6} , 1, 1, false, 0, new uint8_t[2]{1, 0}), // [0] type of waveform
      Value(1000, "", new int32_t[2]{20, 99999} , 1, 1, true, 0, new uint8_t[2]{6, 0}), // [1] frequency
      Value(0, "", new int32_t[2]{0, 1} , 1, 1, false, 0, new uint8_t[2]{15, 0}), // [2] output state
      Value(50, "", new int32_t[2]{0, 50}, 10, 1, false, 0, new uint8_t[2]{1, 1}), // [3] amplitude resistor network regulated after generator network 0 - 5 Volts
      //Value( 0, "", new int32_t[2]{ -50, 50}, 10, 1, false, 0, new uint8_t[2]{9, 1}), // [4] offset pwm regulated with respect to 2.5V
      Value(50, "", new int32_t[2]{ 1, 99}, 1, 1, false, 0, new uint8_t[2]{10, 1}), // [4] duty cycle 1 - 99 %
      Value(1000, "", new int32_t[2]{150, 11000000} , 1, 1, true, 1, new uint8_t[2]{5, 0}), // [5] frequency fast MHz
      
      //Value(0, "", new int32_t[2]{ -100000, 100000}, 1, 1, true, 1, new char[2]{11, 1}), // [7] sweep
    };
    volatile uint8_t activeRegulationOnValue = 0;
    uint8_t actives = 6;
    uint8_t attenuators[3][2] = {
      {27, 2},
      {26, 4},
      {25, 8},
    };
    uint8_t registeredAttenuatorsNo = 3;
  public:

    /////////////////////////    /////////////////////////    /////////////////////////
    // getters
    /////////////////////////    /////////////////////////    /////////////////////////
    int8_t getActive();
    /////////////////////////
    int8_t getTotalValues();

    /////////////////////////    /////////////////////////    /////////////////////////
    // setters
    /////////////////////////    /////////////////////////    /////////////////////////
    void onSet(int8_t what);
    /////////////////////////
    void setValue(int8_t what, int8_t value);
    /////////////////////////
    void setActive(int8_t what);
    /////////////////////////    /////////////////////////    /////////////////////////
    // output regulation
    /////////////////////////    /////////////////////////    /////////////////////////
    void setOutputState(int8_t state);
    /////////////////////////    /////////////////////////    /////////////////////////
    // amplitude regulation
    /////////////////////////    /////////////////////////    /////////////////////////
    int8_t amplitudeRegulation_returnVoltageforAtten(int8_t attenuatorId);
    /////////////////////////
    int8_t amplitudeRegulation_pickCorrectAttenuatorPin(uint8_t expectedAmplitudePeak_V_timesTen);
    /////////////////////////
    void amplitudeRegulation_freeAttenuators();
    /////////////////////////
    int32_t amplitudeRegulation_calculateSoftAttenuation(int32_t setAmplitudePeak_V_timesTen);
    /////////////////////////
    void amplitudeRegulationMaster(int32_t setAmplitudePeak_V_timesTen);
    /////////////////////////    /////////////////////////    /////////////////////////
    // offset regulation // OFFSET IS DISABLED IN PORTABLE DEVICE
    /////////////////////////    /////////////////////////    /////////////////////////
    void offsetRegulationPWM(uint8_t dutyCycle);
    /////////////////////////
    void offsetRegulationMaster(int32_t setOffset_V_timesTen);
    /////////////////////////    /////////////////////////    /////////////////////////
    // input regulation
    /////////////////////////    /////////////////////////    /////////////////////////
    int8_t activeValueCirculateSelectedDigitId(int8_t stepMove);
    /////////////////////////
    byte activeValueCirculateSelectedDigit(int8_t stepMove);
    /////////////////////////
    int8_t activeValueCirculate(int8_t value);
    /////////////////////////
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// S-GEN DISPLAY
/////////////////////////////////////////////////////////////////////////////////////
class SGEN_Display {

  private:
    //
    //byte activeScreen = 0;
    byte lastScreen = -1;
    //
    int8_t lastActiveValue = 0;
    //
    volatile byte lastUserAction = ACTION_ENCODER_MOVED;
    String activeCharacter = "*";
    volatile bool digitHighlightActive = false;

  public:
    byte* softFrequencyDigitsBuffer;
    byte* hardwareFrequencyDigitsBuffer;
    /////////////////////////    /////////////////////////    /////////////////////////
    // general transformations
    /////////////////////////    /////////////////////////    /////////////////////////
    String formatIntAsString(int32_t fullNumber, int divider);
    ///////////////////
    void valueToBuffer(byte* digitsBuffer, uint8_t i);
    ///////////////////
    String codeToWavetype(int32_t wvCode);
    /////////////////////////    /////////////////////////    /////////////////////////
    // screen 1
    /////////////////////////    /////////////////////////    /////////////////////////
    void displayWavetype();
    /////////////////////////
    //
    void displaySoftFrequency();
    ///////////////////
    void displayStatus();
    ///////////////////
    void displayAmplitude();
    ///////////////////
    void displayOffset();
    /////////////////////////    /////////////////////////    /////////////////////////
    // screen 2
    /////////////////////////    /////////////////////////    /////////////////////////
    void displayHardFrequency();
    ///////////////////
    void displayDutyCycle();
    ///////////////////
    /*
      void SGEN_Display::clearActive() {
      for (int i = 0; i < sizeof(assocCoords); i++) {
        lcd.setCursor(assocCoords[i][0] - 1, assocCoords[i][1]);
        lcd.print(" ");
      }
      }
    */
    /////////////////////////    /////////////////////////    /////////////////////////
    // markers and selections
    /////////////////////////    /////////////////////////    /////////////////////////
    void setActiveCharacter(String charct);
    ///////////////////
    void setHighlight(bool highlight);
    ///////////////////
    void setLastUserAction(byte action);
    ///////////////////
    void clearLastSelected();
    ///////////////////
    void displaySelected();
    ///////////////////
    void displayError(int errorCode);
    ///////////////////
    void displayHighlighted();
    /////////////////////////    /////////////////////////    /////////////////////////
    // selective display, static content
    /////////////////////////    /////////////////////////    /////////////////////////
    void displayBatteryStats();
    /////////////////////////    /////////////////////////    /////////////////////////
    // selective display
    /////////////////////////    /////////////////////////    /////////////////////////
    void displayStaticContents(uint8_t screenID);
    ///////////////////
    void displayActive();
    ///////////////////
    void displayByID(uint8_t id);
    /////////////////////////
    void fastLCDClear();
    /////////////////////////    /////////////////////////    /////////////////////////
    // multi-screen support
    /////////////////////////    /////////////////////////    /////////////////////////
    uint8_t getActiveScreenId();
    ///////////////////
    void displayCurrentScreenContents();
    ///////////////////
    uint8_t syncScreenContents();
    /////////////////////////    /////////////////////////    /////////////////////////
    // main display governors
    /////////////////////////    /////////////////////////    /////////////////////////
    /* deprec
      void displayAll() {
      this->displayWavetype();
      this->displaySoftFrequency();
      this->displayStatus();
      this->displayAmplitude();
      this->displaySelected();
      this->displayHighlighted();
      this->displayOffset();
      lcdRedrawFlag = false;
      }
    */
    ///////////////////
    void displaySelective();
    //String fillBlank(int startEndCoord[], String data);
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /////////////////////////    /////////////////////////    /////////////////////////
// END
/////////////////////////////////////////////////////////////////////////////////////
